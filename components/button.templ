package components

import (
	"github.com/axzilla/templui/utils"
	"strings"
)

type ButtonVariant string
type ButtonSize string

const (
	ButtonVariantDefault     ButtonVariant = "default"
	ButtonVariantDestructive ButtonVariant = "destructive"
	ButtonVariantOutline     ButtonVariant = "outline"
	ButtonVariantSecondary   ButtonVariant = "secondary"
	ButtonVariantGhost       ButtonVariant = "ghost"
	ButtonVariantLink        ButtonVariant = "link"
)

const (
	ButtonSizeIcon ButtonSize = "icon"
)

type ButtonProps struct {
	ID           string
	Class        string
	Attributes   templ.Attributes
	Variant      ButtonVariant
	Size         ButtonSize
	FullWidth    bool
	Href         string
	Target       string
	Disabled     bool
	Type         string
	HxGet        string
	HxPost       string
	HxPut        string
	HxDelete     string
	HxTrigger    string
	HxTarget     string
	HxSwap       string
	HxReplaceUrl string
}

templ Button(props ButtonProps) {
	if props.Href != "" {
		<a
			id={ props.ID }
			href={ templ.SafeURL(props.Href) }
			target={ props.Target }
			if props.Disabled {
				disabled
			}
			if props.HxGet != "" {
				hx-get={ props.HxGet }
			}
			if props.HxPost != "" {
				hx-post={ props.HxPost }
			}
			if props.HxPut != "" {
				hx-put={ props.HxPut }
			}
			if props.HxDelete != "" {
				hx-delete={ props.HxDelete }
			}
			if props.HxTrigger != "" {
				hx-trigger={ props.HxTrigger }
			}
			if props.HxTarget != "" {
				hx-target={ props.HxTarget }
			}
			if props.HxSwap != "" {
				hx-swap={ props.HxSwap }
			}
			if props.HxReplaceUrl != "" {
				hx-replace-url={ props.HxReplaceUrl }
			}
			{ props.Attributes... }
		>
			<button
				class={
					utils.TwMerge(
						"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors",
						"focus-visible:outline-hidden focus-visible:ring-2 focus:ring-ring focus-visible:ring-offset-2",
						"disabled:opacity-50 disabled:cursor-not-allowed",
						"cursor-pointer",
						props.variantClasses(),
						props.sizeClasses(),
						props.modifierClasses(),
						props.Class,
					),
				}
				if props.Type != "" {
					type={ props.Type }
				}
				disabled?={ props.Disabled }
				{ props.Attributes... }
			>
				{ children... }
			</button>
		</a>
	} else {
		<button
			id={ props.ID }
			class={
				utils.TwMerge(
					"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors",
					"focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
					"disabled:opacity-50 disabled:cursor-not-allowed",
					"cursor-pointer",
					props.variantClasses(),
					props.sizeClasses(),
					props.modifierClasses(),
					props.Class,
				),
			}
			if props.Type != "" {
				type={ props.Type }
			}
			disabled?={ props.Disabled }
			if props.HxGet != "" {
				hx-get={ props.HxGet }
			}
			if props.HxPost != "" {
				hx-post={ props.HxPost }
			}
			if props.HxPut != "" {
				hx-put={ props.HxPut }
			}
			if props.HxDelete != "" {
				hx-delete={ props.HxDelete }
			}
			if props.HxTrigger != "" {
				hx-trigger={ props.HxTrigger }
			}
			if props.HxTarget != "" {
				hx-target={ props.HxTarget }
			}
			if props.HxSwap != "" {
				hx-swap={ props.HxSwap }
			}
			if props.HxReplaceUrl != "" {
				hx-replace-url={ props.HxReplaceUrl }
			}
			{ props.Attributes... }
		>
			{ children... }
		</button>
	}
}

func (b ButtonProps) variantClasses() string {
	switch b.Variant {
	case ButtonVariantDestructive:
		return "bg-destructive text-destructive-foreground hover:bg-destructive/90"
	case ButtonVariantOutline:
		return "border border-input bg-background hover:bg-accent hover:text-accent-foreground"
	case ButtonVariantSecondary:
		return "bg-secondary text-secondary-foreground hover:bg-secondary/80"
	case ButtonVariantGhost:
		return "hover:bg-accent hover:text-accent-foreground"
	case ButtonVariantLink:
		return "text-primary underline-offset-4 hover:underline"
	default:
		return "bg-primary text-primary-foreground hover:bg-primary/90"
	}
}

func (b ButtonProps) sizeClasses() string {
	switch b.Size {
	case ButtonSizeIcon:
		return "h-10 w-10"
	default:
		return "h-10 px-4 py-2 rounded-md"
	}
}

func (b ButtonProps) modifierClasses() string {
	classes := []string{}
	if b.FullWidth {
		classes = append(classes, "w-full")
	}
	return strings.Join(classes, " ")
}
