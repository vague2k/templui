
package components

import "github.com/axzilla/templui/utils"

type DropdownMenuProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuTriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Width      string
	MaxHeight  string
	Align      string
	Side       string
}

type DropdownMenuGroupProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuLabelProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuItemProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Disabled   bool
	Href       string
	Target     string
}

type DropdownMenuSeparatorProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuShortcutProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuSubProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuSubTriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuSubContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DropdownMenuPortalProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ DropdownMenu(props DropdownMenuProps) {
	<div
		id={ props.ID }
		x-data="dropdown"
		class={ utils.TwMerge("relative inline-block text-left", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuTrigger(props DropdownMenuTriggerProps) {
	<div
		id={ props.ID }
		@click="toggleMenu"
		class={ utils.TwMerge("inline-block", props.Class) }
		data-trigger
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuContent(props DropdownMenuContentProps) {
	<div
		id={ props.ID }
		x-ref="panel"
		x-show="isMenuOpen"
		@click.outside="closeMenu"
		@keydown.escape.window="closeMenu"
		x-transition:enter="transition ease-out duration-100"
		x-transition:enter-start="opacity-0 scale-95"
		x-transition:enter-end="opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="opacity-100 scale-100"
		x-transition:leave-end="opacity-0 scale-95"
		class={ utils.TwMerge(
			"absolute z-50 rounded-md bg-popover p-1 shadow-md focus:outline-none overflow-auto",
			"border border-border",
			"min-w-[8rem]",
			props.Width,
			props.Class,
		) }
		style="top: 100%; margin-top: 0.25rem; left: 0; max-height: var(--dropdown-max-height, 300px);"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuGroup(props DropdownMenuGroupProps) {
	<div
		id={ props.ID }
		class={ utils.TwMerge("py-1", props.Class) }
		role="group"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuLabel(props DropdownMenuLabelProps) {
	<div
		id={ props.ID }
		class={ utils.TwMerge("px-2 py-1.5 text-sm font-semibold", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuItem(props DropdownMenuItemProps) {
	if props.Href != "" {
		<a
			id={ props.ID }
			href={ templ.SafeURL(props.Href) }
			target={ props.Target }
			class={
				utils.TwMerge(
					"flex text-left items-center px-2 py-1.5 text-sm rounded-sm",
					utils.If(!props.Disabled, "focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground cursor-default"),
					utils.If(props.Disabled, "opacity-50 pointer-events-none"),
					props.Class,
				),
			}
			role="menuitem"
			data-menu-item=""
			{ props.Attributes... }
		>
			{ children... }
		</a>
	} else {
		<button
			id={ props.ID }
			class={
				utils.TwMerge(
					"w-full text-left flex items-center justify-between px-2 py-1.5 text-sm rounded-sm",
					utils.If(!props.Disabled, "focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground cursor-default"),
					utils.If(props.Disabled, "opacity-50 pointer-events-none"),
					props.Class,
				),
			}
			role="menuitem"
			data-menu-item=""
			disabled?={ props.Disabled }
			{ props.Attributes... }
		>
			{ children... }
		</button>
	}
}

templ DropdownMenuSeparator(props DropdownMenuSeparatorProps) {
	<div
		id={ props.ID }
		class={ utils.TwMerge("h-px my-1 -mx-1 bg-muted", props.Class) }
		role="separator"
		{ props.Attributes... }
	></div>
}

templ DropdownMenuShortcut(props DropdownMenuShortcutProps) {
	<span
		id={ props.ID }
		class={ utils.TwMerge("ml-auto text-xs tracking-widest opacity-60", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</span>
}

templ DropdownMenuSub(props DropdownMenuSubProps) {
	<div
		id={ props.ID }
		x-data="dropdownSubmenu"
		class={ utils.TwMerge("relative", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuSubTrigger(props DropdownMenuSubTriggerProps) {
	<button
		id={ props.ID }
		type="button"
		x-ref="subTrigger"
		data-submenu-trigger
		class={
			utils.TwMerge(
				"w-full text-left flex items-center justify-between px-2 py-1.5 text-sm rounded-sm",
				"focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground cursor-default",
				"data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
				props.Class,
			),
		}
		{ props.Attributes... }
	>
		<span>
			{ children... }
		</span>
		<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-auto">
			<path d="M6.5 3L11.5 8L6.5 13" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
}

templ DropdownMenuPortal(props DropdownMenuPortalProps) {
	<div
		id={ props.ID }
		class={ utils.TwMerge("dropdown-portal", props.Class) }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuSubContent(props DropdownMenuSubContentProps) {
	<div
		id={ props.ID }
		x-ref="subContent"
		data-submenu-content
		class={
			utils.TwMerge(
				"z-[9999] min-w-[8rem] rounded-md border bg-popover p-1 shadow-lg",
				props.Class,
			),
		}
		style="position: fixed; display: none;"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

templ DropdownMenuScript() {
	<script defer nonce={ templ.GetNonce(ctx) }>
	document.addEventListener('alpine:init', () => {
		// Dropdown component with improved positioning
		Alpine.data('dropdown', () => ({
			isMenuOpen: false,
			
			toggleMenu() {
				this.isMenuOpen = !this.isMenuOpen;
				
				if (this.isMenuOpen) {
					this.$nextTick(() => {
						this.adjustPosition();
						window.addEventListener('resize', this.adjustPosition.bind(this));
					});
				} else {
					window.removeEventListener('resize', this.adjustPosition.bind(this));
				}
			},
			
			closeMenu() {
				this.isMenuOpen = false;
				window.removeEventListener('resize', this.adjustPosition.bind(this));
			},
			
			adjustPosition() {
				const panel = this.$refs.panel;
				if (!panel) return;
				
				const viewportHeight = window.innerHeight;
				const viewportWidth = window.innerWidth;
				
				const triggerRect = this.$el.getBoundingClientRect();
				
				// First set standard values for measurements
				panel.style.top = '100%';
				panel.style.left = '0';
				panel.style.bottom = 'auto';
				panel.style.right = 'auto';
				panel.style.maxHeight = '';
				
				// Re-measure after positioning
				const panelRect = panel.getBoundingClientRect();
				
				// Horizontal positioning
				if (triggerRect.left + panelRect.width > viewportWidth) {
					panel.style.left = 'auto';
					panel.style.right = '0';
				}
				
				// Vertical positioning - more complex for different cases
				const spaceBelow = viewportHeight - triggerRect.bottom;
				const spaceAbove = triggerRect.top;
				
				// If there is enough space below
				if (panelRect.height <= spaceBelow) {
					// Position below the trigger
					panel.style.top = '100%';
					panel.style.bottom = 'auto';
					panel.style.marginTop = '0.25rem';
					panel.style.maxHeight = `${Math.max(100, spaceBelow - 10)}px`;
				}
				// If not enough space below, but enough space above
				else if (panelRect.height <= spaceAbove) {
					// Position above the trigger
					panel.style.top = 'auto';
					panel.style.bottom = '100%';
					panel.style.marginTop = '0';
					panel.style.marginBottom = '0.25rem';
					panel.style.maxHeight = `${Math.max(100, spaceAbove - 10)}px`;
				}
				// If there isn't enough space either above or below
				else {
					// Decide where there is more space and use the maximum available space
					if (spaceBelow >= spaceAbove) {
						// If there's more space below than above
						panel.style.top = '100%';
						panel.style.bottom = 'auto';
						panel.style.marginTop = '0.25rem';
						panel.style.maxHeight = `${Math.max(100, spaceBelow - 10)}px`;
					} else {
						// If there's more space above than below
						panel.style.top = 'auto';
						panel.style.bottom = '100%';
						panel.style.marginTop = '0';
						panel.style.marginBottom = '0.25rem';
						panel.style.maxHeight = `${Math.max(100, spaceAbove - 10)}px`;
					}
				}
				
				// CSS variable for other components that need it
				document.documentElement.style.setProperty('--dropdown-max-height', panel.style.maxHeight);
			}
		}));
		
		// Submenu component with improved positioning and manual event setup
		Alpine.data('dropdownSubmenu', () => ({
			isSubmenuOpen: false,
			closeTimer: null,
			isMouseOverSubmenu: false,
			
			init() {
				// Find or create portal container
				const portalContainer = document.getElementById('dropdown-portal-container');
				if (!portalContainer) {
					const container = document.createElement('div');
					container.id = 'dropdown-portal-container';
					container.style.position = 'fixed';
					container.style.top = '0';
					container.style.left = '0';
					container.style.pointerEvents = 'none';
					container.style.zIndex = '9999';
					document.body.appendChild(container);
				}
				
				// Move sub-content to portal if portal exists
				const portalElement = this.$el.querySelector('.dropdown-portal');
				if (portalElement) {
					const subContent = portalElement.querySelector('[data-submenu-content]');
					if (subContent) {
						document.getElementById('dropdown-portal-container').appendChild(subContent);
					}
				}
				
				// Manual event setup
				this.$nextTick(() => {
					const self = this;
					const trigger = this.$refs.subTrigger;
					const content = this.$refs.subContent;
					
					if (trigger) {
						trigger.addEventListener('mouseenter', function() {
							self.openSubmenu();
						});
						
						trigger.addEventListener('focus', function() {
							self.openSubmenu();
						});
						
						trigger.addEventListener('mouseleave', function() {
							self.startCloseTimer();
						});
						
						trigger.addEventListener('blur', function() {
							self.startCloseTimer();
						});
					}
					
					if (content) {
						content.addEventListener('mouseenter', function() {
							self.isMouseOverSubmenu = true;
							self.openSubmenu();
						});
						
						content.addEventListener('mouseleave', function() {
							self.isMouseOverSubmenu = false;
							self.startCloseTimer();
						});
					}
				});
			},
			
			openSubmenu() {
				clearTimeout(this.closeTimer);
				this.isSubmenuOpen = true;
				
				const submenu = this.$refs.subContent;
				if (submenu) {
					submenu.style.display = 'block';
					this.positionSubmenu();
				}
			},
			
			startCloseTimer() {
				const self = this;
				
				// Delay to give the mouse time to move to the submenu
				this.closeTimer = setTimeout(function() {
					if (!self.isMouseOverSubmenu) {
						self.closeSubmenu();
					}
				}, 300);
			},
			
			closeSubmenu() {
				this.isSubmenuOpen = false;
				
				const submenu = this.$refs.subContent;
				if (submenu) {
					submenu.style.display = 'none';
				}
			},
			
			positionSubmenu() {
				const submenu = this.$refs.subContent;
				const trigger = this.$refs.subTrigger;
				
				if (!submenu || !trigger) return;
				
				// Make visible for correct measurements
				submenu.style.display = 'block';
				submenu.style.pointerEvents = 'auto';
				
				const triggerRect = trigger.getBoundingClientRect();
				const viewportWidth = window.innerWidth;
				const viewportHeight = window.innerHeight;
				
				// Default position: right of the trigger
				submenu.style.top = `${triggerRect.top}px`;
				submenu.style.left = `${triggerRect.right + 4}px`;
				
				// Re-measure and adjust if needed
				const submenuRect = submenu.getBoundingClientRect();
				
				// Check horizontal positioning
				if (triggerRect.right + submenuRect.width + 4 > viewportWidth) {
					// If there's no space on the right, show left of the trigger
					submenu.style.left = `${triggerRect.left - submenuRect.width - 4}px`;
				}
				
				// Check vertical positioning
				const spaceBelow = viewportHeight - triggerRect.top;
				const spaceAbove = triggerRect.bottom;
				
				if (submenuRect.height > spaceBelow) {
					// If there isn't enough space below...
					if (submenuRect.height <= spaceAbove) {
						// If there's enough space above, show submenu above the trigger
						submenu.style.top = `${triggerRect.bottom - submenuRect.height}px`;
					} else {
						// If there isn't enough space either above or below, use maximum available height
						const maxHeight = Math.max(spaceBelow, spaceAbove);
						submenu.style.maxHeight = `${maxHeight - 20}px`; // 20px spacing
						
						if (spaceBelow >= spaceAbove) {
							// More space below than above
							submenu.style.top = `${triggerRect.top}px`;
						} else {
							// More space above than below
							submenu.style.top = `${Math.max(10, triggerRect.bottom - maxHeight + 10)}px`;
						}
					}
				}
				
				// Check if the submenu is still in the visible area
				const updatedSubmenuRect = submenu.getBoundingClientRect();
				
				// Ensure the top edge doesn't extend beyond the viewport
				if (updatedSubmenuRect.top < 10) {
					submenu.style.top = '10px';
				}
				
				// Ensure the bottom edge doesn't extend beyond the viewport
				if (updatedSubmenuRect.bottom > viewportHeight - 10) {
					if (updatedSubmenuRect.height > viewportHeight - 20) {
						// If the submenu is larger than the viewport, make it scrollable
						submenu.style.maxHeight = `${viewportHeight - 20}px`;
						submenu.style.top = '10px';
						submenu.style.overflowY = 'auto';
					} else {
						// Otherwise simply move it up
						submenu.style.top = `${viewportHeight - updatedSubmenuRect.height - 10}px`;
					}
				}
			}
		}));
	});
	
	// Event listener for clicks on menu items to close all menus
	document.addEventListener('DOMContentLoaded', function() {
		document.addEventListener('click', function(event) {
			// Check if a menu item was clicked
			const menuItem = event.target.closest('[data-menu-item]');
			if (menuItem) {
				// Close all dropdown menus
				document.querySelectorAll('[x-data="dropdown"]').forEach(dropdown => {
					if (Alpine.$data) {
						const instance = Alpine.$data(dropdown);
						if (instance && typeof instance.closeMenu === 'function') {
							instance.closeMenu();
						}
					} else {
						// Fallback for older Alpine.js versions
						setTimeout(function() {
							const triggerButton = dropdown.querySelector('[data-trigger]');
							if (triggerButton && dropdown.querySelector('[x-ref="panel"]').style.display !== 'none') {
								triggerButton.click();
							}
						}, 10);
					}
				});
				
				// Additionally close all submenus
				document.querySelectorAll('[data-submenu-content]').forEach(submenu => {
					submenu.style.display = 'none';
				});
				
				// Reset all submenu states in dropdownSubmenu components
				document.querySelectorAll('[x-data="dropdownSubmenu"]').forEach(submenuComponent => {
					if (Alpine.$data) {
						const instance = Alpine.$data(submenuComponent);
						if (instance) {
							instance.isSubmenuOpen = false;
							instance.isMouseOverSubmenu = false;
							clearTimeout(instance.closeTimer);
							
							if (typeof instance.closeSubmenu === 'function') {
								instance.closeSubmenu();
							}
						}
					}
				});
			}
		});
	});
</script>
}
