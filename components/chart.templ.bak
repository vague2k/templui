package components

import "github.com/axzilla/templui/utils"

type ChartVariant string

const (
	ChartVariantBar      ChartVariant = "bar"
	ChartVariantLine     ChartVariant = "line"
	ChartVariantPie      ChartVariant = "pie"
	ChartVariantDoughnut ChartVariant = "doughnut"
	ChartVariantRadar    ChartVariant = "radar"
)

type ChartDataset struct {
	Label           string    `json:"label"`
	Data            []float64 `json:"data"`
	BorderWidth     int       `json:"borderWidth,omitempty"`
	BorderColor     string    `json:"borderColor,omitempty"`
	BackgroundColor string    `json:"backgroundColor,omitempty"`
	Tension         float64   `json:"tension,omitempty"`
	Fill            bool      `json:"fill,omitempty"`
	Stepped         bool      `json:"stepped,omitempty"`
}

type ChartOptions struct {
	Responsive bool `json:"responsive,omitempty"`
	Legend     bool `json:"legend,omitempty"`
}

type ChartData struct {
	Labels   []string       `json:"labels"`
	Datasets []ChartDataset `json:"datasets"`
}

type ChartConfig struct {
	Type        ChartVariant `json:"type"`
	Data        ChartData    `json:"data"`
	Options     ChartOptions `json:"options,omitempty"`
	ShowLegend  bool         `json:"showLegend,omitempty"`
	ShowXAxis   bool         `json:"showXAxis"`
	ShowYAxis   bool         `json:"showYAxis"`
	ShowXLabels bool         `json:"showXLabels"`
	ShowYLabels bool         `json:"showYLabels"`
	ShowXGrid   bool         `json:"showXGrid"`
	ShowYGrid   bool         `json:"showYGrid"`
	Horizontal  bool         `json:"horizontal"`
	Stacked     bool         `json:"stacked"`
}

// Erweiterung des ChartProps um ID und Attributes
type ChartProps struct {
	ID          string
	Variant     ChartVariant
	Data        ChartData
	Options     ChartOptions
	ShowLegend  bool
	ShowXAxis   bool
	ShowYAxis   bool
	ShowXLabels bool
	ShowYLabels bool
	ShowXGrid   bool
	ShowYGrid   bool
	Horizontal  bool
	Stacked     bool
	Class       string
	Attributes  templ.Attributes
}

templ Chart(props ChartProps) {
	// Wenn keine ID gesetzt, generiere eine zuf√§llige
	if props.ID == "" {
		{{ props.ID = "chart-" + utils.RandomID() }}
	}
	{{ canvasId := props.ID + "-canvas" }}
	{{ dataId := props.ID + "-data" }}
	<div
		id={ props.ID }
		class={ utils.TwMerge("chart-container relative", props.Class) }
		{ props.Attributes... }
	>
		<canvas id={ canvasId } data-chart-id={ dataId }></canvas>
	</div>
	{{
		chartConfig := ChartConfig{
			Type:        props.Variant,
			Data:        props.Data,
			Options:     props.Options,
			ShowLegend:  props.ShowLegend,
			ShowXAxis:   props.ShowXAxis,
			ShowYAxis:   props.ShowYAxis,
			ShowXLabels: props.ShowXLabels,
			ShowYLabels: props.ShowYLabels,
			ShowXGrid:   props.ShowXGrid,
			ShowYGrid:   props.ShowYGrid,
			Horizontal:  props.Horizontal,
			Stacked:     props.Stacked,
		}
	}}
	@templ.JSONScript(dataId, chartConfig)
}

templ ChartScripts() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<!-- Load Chart.js library -->
		<script defer nonce={ templ.GetNonce(ctx) } src="https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.min.js"></script>
		<!-- Initialize charts -->
		<script nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', function() {
				const chartInstances = {};
				function getThemeColors() {
					const computedStyle = getComputedStyle(document.documentElement);
					return {
						foreground: computedStyle.getPropertyValue('--foreground').trim(),
						background: computedStyle.getPropertyValue('--background').trim(),
						mutedForeground: computedStyle.getPropertyValue('--muted-foreground').trim(),
						border: computedStyle.getPropertyValue('--border').trim()
					};
				}
				function initCharts() {
					const colors = getThemeColors();
					document.querySelectorAll('.chart-container').forEach(container => {
						const canvas = container.querySelector('canvas');
						if (!canvas) return;
						const dataId = canvas.getAttribute('data-chart-id');
						const dataElement = document.getElementById(dataId);
						if (!dataElement) return;
						if (chartInstances[canvas.id]) {
							chartInstances[canvas.id].destroy();
						}
						const chartConfig = JSON.parse(dataElement.textContent);
						Chart.defaults.elements.point.radius = 0;
						Chart.defaults.elements.point.hoverRadius = 5;
						const chart = new Chart(canvas, {
							...chartConfig,
							options: {
								interaction: {
									intersect: false,
									axis: "xy",
									mode: chartConfig.type === "pie" || 
										chartConfig.type === "doughnut" ||
										chartConfig.type === "bar" ||
										chartConfig.type === "radar" ? "nearest" : "index"
								},
								indexAxis: chartConfig.horizontal ? "y" : "x",
								plugins: {
									legend: {
										display: chartConfig.showLegend || false,
										labels: {
											color: colors.foreground
										}
									},
									tooltip: {
										backgroundColor: colors.background,
										bodyColor: colors.mutedForeground,
										titleColor: colors.foreground,
										borderColor: colors.border,
										borderWidth: 1
									}
								},
								scales: chartConfig.type === "radar" ? {
									r: {
										grid: {
											color: colors.border,
											display: chartConfig.showYGrid || true
										},
										ticks: {
											color: colors.mutedForeground,
											backdropColor: 'transparent',
											display: chartConfig.showYLabels || true
										},
										angleLines: {
											color: colors.border,
											display: chartConfig.showXGrid || true
										},
										pointLabels: {
											color: colors.foreground,
											font: {
												size: 12
											}
										},
										border: {
											display: chartConfig.showYAxis || false,
											color: colors.border
										},
										beginAtZero: true
									}
								} : {
									x: {
										beginAtZero: true,
										display: chartConfig.showXLabels || chartConfig.showXGrid || chartConfig.showXAxis,
										border: {
											display: chartConfig.showXAxis || false
										},
										ticks: {                                      
											display: chartConfig.showXLabels || false,   
											color: colors.mutedForeground
										},
										grid: {
											display: chartConfig.showXGrid || false,
											color: colors.border
										},
										stacked: chartConfig.stacked
									},
									y: {
										offset: true,
										beginAtZero: true,
										display: chartConfig.showYLabels || chartConfig.showYGrid || chartConfig.showYAxis,
										border: {
											display: chartConfig.showYAxis || false
										},
										ticks: {                                      
											display: chartConfig.showYLabels || false,   
											color: colors.mutedForeground
										},
										grid: {
											display: chartConfig.showYGrid || false,
											color: colors.border
										},
										stacked: chartConfig.stacked
									}
								}
							}
						});
						chartInstances[canvas.id] = chart;
					});
				}
				initCharts();
				window.addEventListener('resize', function() {
					for (let id in chartInstances) {
						chartInstances[id].resize();
					}
				});
				const observer = new MutationObserver(() => {
					setTimeout(initCharts, 50);
				});
				observer.observe(document.documentElement, { attributes: true });
				document.addEventListener('alpine:initialized', () => {
					document.addEventListener('theme-changed', initCharts);
				});
			});
		</script>
	}
}
