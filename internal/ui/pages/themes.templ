package pages

import (
	"github.com/axzilla/templui/components"
	"github.com/axzilla/templui/icons"
	"github.com/axzilla/templui/internal/ui/layouts"
	"github.com/axzilla/templui/internal/ui/modules"
)

templ ThemesHandle() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('themeCustomizer', () => ({
					themeColors: {
						zinc: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(240 10% 3.9%)",
							muted: "hsl(240 4.8% 95.9%)",
							"muted-foreground": "hsl(240 3.8% 46.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(240 10% 3.9%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(240 10% 3.9%)",
							border: "hsl(240 5.9% 90%)",
							input: "hsl(240 5.9% 90%)",
							primary: "hsl(240 5.9% 10%)",
							"primary-foreground": "hsl(0 0% 98%)",
							secondary: "hsl(240 4.8% 95.9%)",
							"secondary-foreground": "hsl(240 5.9% 10%)",
							accent: "hsl(240 4.8% 95.9%)",
							"accent-foreground": "hsl(240 5.9% 10%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(240 5.9% 10%)",
						},
						dark: {
							background: "hsl(240 10% 3.9%)",
							foreground: "hsl(0 0% 98%)",
							muted: "hsl(240 3.7% 15.9%)",
							"muted-foreground": "hsl(240 5% 64.9%)",
							popover: "hsl(240 10% 3.9%)",
							"popover-foreground": "hsl(0 0% 98%)",
							card: "hsl(240 10% 3.9%)",
							"card-foreground": "hsl(0 0% 98%)",
							border: "hsl(240 3.7% 15.9%)",
							input: "hsl(240 3.7% 15.9%)",
							primary: "hsl(0 0% 98%)",
							"primary-foreground": "hsl(240 5.9% 10%)",
							secondary: "hsl(240 3.7% 15.9%)",
							"secondary-foreground": "hsl(0 0% 98%)",
							accent: "hsl(240 3.7% 15.9%)",
							"accent-foreground": "hsl(0 0% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(240 4.9% 83.9%)",
						},
						},
						slate: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(222.2 84% 4.9%)",
							muted: "hsl(210 40% 96.1%)",
							"muted-foreground": "hsl(215.4 16.3% 46.9%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(222.2 84% 4.9%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(222.2 84% 4.9%)",
							border: "hsl(214.3 31.8% 91.4%)",
							input: "hsl(214.3 31.8% 91.4%)",
							primary: "hsl(222.2 47.4% 11.2%)",
							"primary-foreground": "hsl(210 40% 98%)",
							secondary: "hsl(210 40% 96.1%)",
							"secondary-foreground": "hsl(222.2 47.4% 11.2%)",
							accent: "hsl(210 40% 96.1%)",
							"accent-foreground": "hsl(222.2 47.4% 11.2%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(210 40% 98%)",
							ring: "hsl(222.2 84% 4.9%)",
						},
						dark: {
							background: "hsl(222.2 84% 4.9%)",
							foreground: "hsl(210 40% 98%)",
							muted: "hsl(217.2 32.6% 17.5%)",
							"muted-foreground": "hsl(215 20.2% 65.1%)",
							popover: "hsl(222.2 84% 4.9%)",
							"popover-foreground": "hsl(210 40% 98%)",
							card: "hsl(222.2 84% 4.9%)",
							"card-foreground": "hsl(210 40% 98%)",
							border: "hsl(217.2 32.6% 17.5%)",
							input: "hsl(217.2 32.6% 17.5%)",
							primary: "hsl(210 40% 98%)",
							"primary-foreground": "hsl(222.2 47.4% 11.2%)",
							secondary: "hsl(217.2 32.6% 17.5%)",
							"secondary-foreground": "hsl(210 40% 98%)",
							accent: "hsl(217.2 32.6% 17.5%)",
							"accent-foreground": "hsl(210 40% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(210 40% 98%)",
							ring: "hsl(212.7 26.8% 83.9%)",
						},
						},
						stone: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(20 14.3% 4.1%)",
							muted: "hsl(60 4.8% 95.9%)",
							"muted-foreground": "hsl(25 5.3% 44.7%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(20 14.3% 4.1%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(20 14.3% 4.1%)",
							border: "hsl(20 5.9% 90%)",
							input: "hsl(20 5.9% 90%)",
							primary: "hsl(24 9.8% 10%)",
							"primary-foreground": "hsl(60 9.1% 97.8%)",
							secondary: "hsl(60 4.8% 95.9%)",
							"secondary-foreground": "hsl(24 9.8% 10%)",
							accent: "hsl(60 4.8% 95.9%)",
							"accent-foreground": "hsl(24 9.8% 10%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(60 9.1% 97.8%)",
							ring: "hsl(20 14.3% 4.1%)",
						},
						dark: {
							background: "hsl(20 14.3% 4.1%)",
							foreground: "hsl(60 9.1% 97.8%)",
							muted: "hsl(12 6.5% 15.1%)",
							"muted-foreground": "hsl(24 5.4% 63.9%)",
							popover: "hsl(20 14.3% 4.1%)",
							"popover-foreground": "hsl(60 9.1% 97.8%)",
							card: "hsl(20 14.3% 4.1%)",
							"card-foreground": "hsl(60 9.1% 97.8%)",
							border: "hsl(12 6.5% 15.1%)",
							input: "hsl(12 6.5% 15.1%)",
							primary: "hsl(60 9.1% 97.8%)",
							"primary-foreground": "hsl(24 9.8% 10%)",
							secondary: "hsl(12 6.5% 15.1%)",
							"secondary-foreground": "hsl(60 9.1% 97.8%)",
							accent: "hsl(12 6.5% 15.1%)",
							"accent-foreground": "hsl(60 9.1% 97.8%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(60 9.1% 97.8%)",
							ring: "hsl(24 5.7% 82.9%)",
						},
						},
						gray: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(224 71.4% 4.1%)",
							muted: "hsl(220 14.3% 95.9%)",
							"muted-foreground": "hsl(220 8.9% 46.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(224 71.4% 4.1%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(224 71.4% 4.1%)",
							border: "hsl(220 13% 91%)",
							input: "hsl(220 13% 91%)",
							primary: "hsl(220.9 39.3% 11%)",
							"primary-foreground": "hsl(210 20% 98%)",
							secondary: "hsl(220 14.3% 95.9%)",
							"secondary-foreground": "hsl(220.9 39.3% 11%)",
							accent: "hsl(220 14.3% 95.9%)",
							"accent-foreground": "hsl(220.9 39.3% 11%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(210 20% 98%)",
							ring: "hsl(224 71.4% 4.1%)",
						},
						dark: {
							background: "hsl(224 71.4% 4.1%)",
							foreground: "hsl(210 20% 98%)",
							muted: "hsl(215 27.9% 16.9%)",
							"muted-foreground": "hsl(217.9 10.6% 64.9%)",
							popover: "hsl(224 71.4% 4.1%)",
							"popover-foreground": "hsl(210 20% 98%)",
							card: "hsl(224 71.4% 4.1%)",
							"card-foreground": "hsl(210 20% 98%)",
							border: "hsl(215 27.9% 16.9%)",
							input: "hsl(215 27.9% 16.9%)",
							primary: "hsl(210 20% 98%)",
							"primary-foreground": "hsl(220.9 39.3% 11%)",
							secondary: "hsl(215 27.9% 16.9%)",
							"secondary-foreground": "hsl(210 20% 98%)",
							accent: "hsl(215 27.9% 16.9%)",
							"accent-foreground": "hsl(210 20% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(210 20% 98%)",
							ring: "hsl(216 12.2% 83.9%)",
						},
						},
						neutral: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(0 0% 3.9%)",
							muted: "hsl(0 0% 96.1%)",
							"muted-foreground": "hsl(0 0% 45.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(0 0% 3.9%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(0 0% 3.9%)",
							border: "hsl(0 0% 89.8%)",
							input: "hsl(0 0% 89.8%)",
							primary: "hsl(0 0% 9%)",
							"primary-foreground": "hsl(0 0% 98%)",
							secondary: "hsl(0 0% 96.1%)",
							"secondary-foreground": "hsl(0 0% 9%)",
							accent: "hsl(0 0% 96.1%)",
							"accent-foreground": "hsl(0 0% 9%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(0 0% 3.9%)",
						},
						dark: {
							background: "hsl(0 0% 3.9%)",
							foreground: "hsl(0 0% 98%)",
							muted: "hsl(0 0% 14.9%)",
							"muted-foreground": "hsl(0 0% 63.9%)",
							popover: "hsl(0 0% 3.9%)",
							"popover-foreground": "hsl(0 0% 98%)",
							card: "hsl(0 0% 3.9%)",
							"card-foreground": "hsl(0 0% 98%)",
							border: "hsl(0 0% 14.9%)",
							input: "hsl(0 0% 14.9%)",
							primary: "hsl(0 0% 98%)",
							"primary-foreground": "hsl(0 0% 9%)",
							secondary: "hsl(0 0% 14.9%)",
							"secondary-foreground": "hsl(0 0% 98%)",
							accent: "hsl(0 0% 14.9%)",
							"accent-foreground": "hsl(0 0% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(0 0% 83.1%)",
						},
						},
						yellow: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(20 14.3% 4.1%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(20 14.3% 4.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(20 14.3% 4.1%)",
							primary: "hsl(47.9 95.8% 53.1%)",
							"primary-foreground": "hsl(26 83.3% 14.1%)",
							secondary: "hsl(60 4.8% 95.9%)",
							"secondary-foreground": "hsl(24 9.8% 10%)",
							muted: "hsl(60 4.8% 95.9%)",
							"muted-foreground": "hsl(25 5.3% 44.7%)",
							accent: "hsl(60 4.8% 95.9%)",
							"accent-foreground": "hsl(24 9.8% 10%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(60 9.1% 97.8%)",
							border: "hsl(20 5.9% 90%)",
							input: "hsl(20 5.9% 90%)",
							ring: "hsl(20 14.3% 4.1%)",
						},
						dark: {
							background: "hsl(20 14.3% 4.1%)",
							foreground: "hsl(60 9.1% 97.8%)",
							card: "hsl(20 14.3% 4.1%)",
							"card-foreground": "hsl(60 9.1% 97.8%)",
							popover: "hsl(20 14.3% 4.1%)",
							"popover-foreground": "hsl(60 9.1% 97.8%)",
							primary: "hsl(47.9 95.8% 53.1%)",
							"primary-foreground": "hsl(26 83.3% 14.1%)",
							secondary: "hsl(12 6.5% 15.1%)",
							"secondary-foreground": "hsl(60 9.1% 97.8%)",
							muted: "hsl(12 6.5% 15.1%)",
							"muted-foreground": "hsl(24 5.4% 63.9%)",
							accent: "hsl(12 6.5% 15.1%)",
							"accent-foreground": "hsl(60 9.1% 97.8%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(60 9.1% 97.8%)",
							border: "hsl(12 6.5% 15.1%)",
							input: "hsl(12 6.5% 15.1%)",
							ring: "hsl(35.5 91.7% 32.9%)",
						},
						},
						red: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(0 0% 3.9%)",
							muted: "hsl(0 0% 96.1%)",
							"muted-foreground": "hsl(0 0% 45.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(0 0% 3.9%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(0 0% 3.9%)",
							border: "hsl(0 0% 89.8%)",
							input: "hsl(0 0% 89.8%)",
							primary: "hsl(0 72.2% 50.6%)",
							"primary-foreground": "hsl(0 85.7% 97.3%)",
							secondary: "hsl(0 0% 96.1%)",
							"secondary-foreground": "hsl(0 0% 9%)",
							accent: "hsl(0 0% 96.1%)",
							"accent-foreground": "hsl(0 0% 9%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(0 72.2% 50.6%)",
							radius: "0.4rem)",
						},
						dark: {
							background: "hsl(0 0% 3.9%)",
							foreground: "hsl(0 0% 98%)",
							muted: "hsl(0 0% 14.9%)",
							"muted-foreground": "hsl(0 0% 63.9%)",
							popover: "hsl(0 0% 3.9%)",
							"popover-foreground": "hsl(0 0% 98%)",
							card: "hsl(0 0% 3.9%)",
							"card-foreground": "hsl(0 0% 98%)",
							border: "hsl(0 0% 14.9%)",
							input: "hsl(0 0% 14.9%)",
							primary: "hsl(0 72.2% 50.6%)",
							"primary-foreground": "hsl(0 85.7% 97.3%)",
							secondary: "hsl(0 0% 14.9%)",
							"secondary-foreground": "hsl(0 0% 98%)",
							accent: "hsl(0 0% 14.9%)",
							"accent-foreground": "hsl(0 0% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(0 72.2% 50.6%)",
						},
						},
						rose: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(240 10% 3.9%)",
							muted: "hsl(240 4.8% 95.9%)",
							"muted-foreground": "hsl(240 3.8% 46.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(240 10% 3.9%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(240 10% 3.9%)",
							border: "hsl(240 5.9% 90%)",
							input: "hsl(240 5.9% 90%)",
							primary: "hsl(346.8 77.2% 49.8%)",
							"primary-foreground": "hsl(355.7 100% 97.3%)",
							secondary: "hsl(240 4.8% 95.9%)",
							"secondary-foreground": "hsl(240 5.9% 10%)",
							accent: "hsl(240 4.8% 95.9%)",
							"accent-foreground": "hsl(240 5.9% 10%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(346.8 77.2% 49.8%)",
						},
						dark: {
							background: "hsl(20 14.3% 4.1%)",
							foreground: "hsl(0 0% 95%)",
							muted: "hsl(0 0% 15%)",
							"muted-foreground": "hsl(240 5% 64.9%)",
							popover: "hsl(0 0% 9%)",
							"popover-foreground": "hsl(0 0% 95%)",
							card: "hsl(24 9.8% 10%)",
							"card-foreground": "hsl(0 0% 95%)",
							border: "hsl(240 3.7% 15.9%)",
							input: "hsl(240 3.7% 15.9%)",
							primary: "hsl(346.8 77.2% 49.8%)",
							"primary-foreground": "hsl(355.7 100% 97.3%)",
							secondary: "hsl(240 3.7% 15.9%)",
							"secondary-foreground": "hsl(0 0% 98%)",
							accent: "hsl(12 6.5% 15.1%)",
							"accent-foreground": "hsl(0 0% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(0 85.7% 97.3%)",
							ring: "hsl(346.8 77.2% 49.8%)",
						},
						},
						orange: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(20 14.3% 4.1%)",
							muted: "hsl(60 4.8% 95.9%)",
							"muted-foreground": "hsl(25 5.3% 44.7%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(20 14.3% 4.1%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(20 14.3% 4.1%)",
							border: "hsl(20 5.9% 90%)",
							input: "hsl(20 5.9% 90%)",
							primary: "hsl(24.6 95% 53.1%)",
							"primary-foreground": "hsl(60 9.1% 97.8%)",
							secondary: "hsl(60 4.8% 95.9%)",
							"secondary-foreground": "hsl(24 9.8% 10%)",
							accent: "hsl(60 4.8% 95.9%)",
							"accent-foreground": "hsl(24 9.8% 10%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(60 9.1% 97.8%)",
							ring: "hsl(24.6 95% 53.1%)",
						},
						dark: {
							background: "hsl(20 14.3% 4.1%)",
							foreground: "hsl(60 9.1% 97.8%)",
							muted: "hsl(12 6.5% 15.1%)",
							"muted-foreground": "hsl(24 5.4% 63.9%)",
							popover: "hsl(20 14.3% 4.1%)",
							"popover-foreground": "hsl(60 9.1% 97.8%)",
							card: "hsl(20 14.3% 4.1%)",
							"card-foreground": "hsl(60 9.1% 97.8%)",
							border: "hsl(12 6.5% 15.1%)",
							input: "hsl(12 6.5% 15.1%)",
							primary: "hsl(20.5 90.2% 48.2%)",
							"primary-foreground": "hsl(60 9.1% 97.8%)",
							secondary: "hsl(12 6.5% 15.1%)",
							"secondary-foreground": "hsl(60 9.1% 97.8%)",
							accent: "hsl(12 6.5% 15.1%)",
							"accent-foreground": "hsl(60 9.1% 97.8%)",
							destructive: "hsl(0 72.2% 50.6%)",
							"destructive-foreground": "hsl(60 9.1% 97.8%)",
							ring: "hsl(20.5 90.2% 48.2%)",
						},
						},
						green: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(240 10% 3.9%)",
							muted: "hsl(240 4.8% 95.9%)",
							"muted-foreground": "hsl(240 3.8% 46.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(240 10% 3.9%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(240 10% 3.9%)",
							border: "hsl(240 5.9% 90%)",
							input: "hsl(240 5.9% 90%)",
							primary: "hsl(142.1 76.2% 36.3%)",
							"primary-foreground": "hsl(355.7 100% 97.3%)",
							secondary: "hsl(240 4.8% 95.9%)",
							"secondary-foreground": "hsl(240 5.9% 10%)",
							accent: "hsl(240 4.8% 95.9%)",
							"accent-foreground": "hsl(240 5.9% 10%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(0 0% 98%)",
							ring: "hsl(142.1 76.2% 36.3%)",
						},
						dark: {
							background: "hsl(20 14.3% 4.1%)",
							foreground: "hsl(0 0% 95%)",
							muted: "hsl(0 0% 15%)",
							"muted-foreground": "hsl(240 5% 64.9%)",
							popover: "hsl(0 0% 9%)",
							"popover-foreground": "hsl(0 0% 95%)",
							card: "hsl(24 9.8% 10%)",
							"card-foreground": "hsl(0 0% 95%)",
							border: "hsl(240 3.7% 15.9%)",
							input: "hsl(240 3.7% 15.9%)",
							primary: "hsl(142.1 70.6% 45.3%)",
							"primary-foreground": "hsl(144.9 80.4% 10%)",
							secondary: "hsl(240 3.7% 15.9%)",
							"secondary-foreground": "hsl(0 0% 98%)",
							accent: "hsl(12 6.5% 15.1%)",
							"accent-foreground": "hsl(0 0% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(0 85.7% 97.3%)",
							ring: "hsl(142.4 71.8% 29.2%)",
						},
						},
						blue: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(222.2 84% 4.9%)",
							muted: "hsl(210 40% 96.1%)",
							"muted-foreground": "hsl(215.4 16.3% 46.9%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(222.2 84% 4.9%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(222.2 84% 4.9%)",
							border: "hsl(214.3 31.8% 91.4%)",
							input: "hsl(214.3 31.8% 91.4%)",
							primary: "hsl(221.2 83.2% 53.3%)",
							"primary-foreground": "hsl(210 40% 98%)",
							secondary: "hsl(210 40% 96.1%)",
							"secondary-foreground": "hsl(222.2 47.4% 11.2%)",
							accent: "hsl(210 40% 96.1%)",
							"accent-foreground": "hsl(222.2 47.4% 11.2%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(210 40% 98%)",
							ring: "hsl(221.2 83.2% 53.3%)",
						},
						dark: {
							background: "hsl(222.2 84% 4.9%)",
							foreground: "hsl(210 40% 98%)",
							muted: "hsl(217.2 32.6% 17.5%)",
							"muted-foreground": "hsl(215 20.2% 65.1%)",
							popover: "hsl(222.2 84% 4.9%)",
							"popover-foreground": "hsl(210 40% 98%)",
							card: "hsl(222.2 84% 4.9%)",
							"card-foreground": "hsl(210 40% 98%)",
							border: "hsl(217.2 32.6% 17.5%)",
							input: "hsl(217.2 32.6% 17.5%)",
							primary: "hsl(217.2 91.2% 59.8%)",
							"primary-foreground": "hsl(222.2 47.4% 11.2%)",
							secondary: "hsl(217.2 32.6% 17.5%)",
							"secondary-foreground": "hsl(210 40% 98%)",
							accent: "hsl(217.2 32.6% 17.5%)",
							"accent-foreground": "hsl(210 40% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(210 40% 98%)",
							ring: "hsl(224.3 76.3% 48%)",
						},
						},
						violet: {
						light: {
							background: "hsl(0 0% 100%)",
							foreground: "hsl(224 71.4% 4.1%)",
							muted: "hsl(220 14.3% 95.9%)",
							"muted-foreground": "hsl(220 8.9% 46.1%)",
							popover: "hsl(0 0% 100%)",
							"popover-foreground": "hsl(224 71.4% 4.1%)",
							card: "hsl(0 0% 100%)",
							"card-foreground": "hsl(224 71.4% 4.1%)",
							border: "hsl(220 13% 91%)",
							input: "hsl(220 13% 91%)",
							primary: "hsl(262.1 83.3% 57.8%)",
							"primary-foreground": "hsl(210 20% 98%)",
							secondary: "hsl(220 14.3% 95.9%)",
							"secondary-foreground": "hsl(220.9 39.3% 11%)",
							accent: "hsl(220 14.3% 95.9%)",
							"accent-foreground": "hsl(220.9 39.3% 11%)",
							destructive: "hsl(0 84.2% 60.2%)",
							"destructive-foreground": "hsl(210 20% 98%)",
							ring: "hsl(262.1 83.3% 57.8%)",
						},
						dark: {
							background: "hsl(224 71.4% 4.1%)",
							foreground: "hsl(210 20% 98%)",
							muted: "hsl(215 27.9% 16.9%)",
							"muted-foreground": "hsl(217.9 10.6% 64.9%)",
							popover: "hsl(224 71.4% 4.1%)",
							"popover-foreground": "hsl(210 20% 98%)",
							card: "hsl(224 71.4% 4.1%)",
							"card-foreground": "hsl(210 20% 98%)",
							border: "hsl(215 27.9% 16.9%)",
							input: "hsl(215 27.9% 16.9%)",
							primary: "hsl(263.4 70% 50.4%)",
							"primary-foreground": "hsl(210 20% 98%)",
							secondary: "hsl(215 27.9% 16.9%)",
							"secondary-foreground": "hsl(210 20% 98%)",
							accent: "hsl(215 27.9% 16.9%)",
							"accent-foreground": "hsl(210 20% 98%)",
							destructive: "hsl(0 62.8% 30.6%)",
							"destructive-foreground": "hsl(210 20% 98%)",
							ring: "hsl(263.4 70% 50.4%)",
						},
						},
					},
					theme: "zinc",
					radius: "0.5",
					generatedCSS: "",

					init() {
						this.applyTheme();
					},

					setTheme(event) {
						// Look for data-theme on target or its ancestors
						const themeElement = event.target.closest('[data-theme]');
						if (themeElement) {
							this.theme = themeElement.dataset.theme;
							this.applyTheme();
						}
					},

					setRadius() {
						this.radius = this.$el.dataset.radius;
						this.applyTheme();
					},

					resetTheme() {
						this.theme = "zinc";
						this.radius = "0.5";
						this.applyTheme();
					},

					applyTheme() {
						const preview = document.getElementById("theme-preview");
						if (!preview) return;

						preview.className = `theme-${this.theme} w-full`;
						preview.style.setProperty("--radius", `${this.radius}rem`);
					},

					isTheme() {
						return this.theme === this.$el.dataset.theme;
					},

					getGeneratedCSS() {
						this.generatedCSS = this.generateCSS();
					},

					generateCSS() {
						const colors = this.themeColors[this.theme];
						if (!colors) return "";

						const cssVars = Object.entries(colors.light)
							.map(([key, value]) => `--${key}: ${value};`)
							// Here we define how each new line should be indented
							.join("\n\t");

						const darkCssVars = Object.entries(colors.dark)
							.map(([key, value]) => `--${key}: ${value};`)
							.join("\n\t");
						// INFO: Don't change the indentation here
						return `:root {
	${cssVars}
	--radius: ${this.radius}rem;
}
.dark {
	${darkCssVars}
	--radius: ${this.radius}rem;
}`;
					},

					setBorderOnThemeButton() {
						if (this.theme === this.$el.dataset.theme) {
							return "border-primary";
						}
					},

					setBorderOnRadiusButton() {
						if (this.radius === this.$el.dataset.radius) {
							return "border-2 border-primary";
						}
					},

					copyToClipboard() {
						navigator.clipboard
							.writeText(this.generatedCSS)
							.then(() => {
							alert("Copied to clipboard!");
							})
							.catch((err) => {
							console.error("Failed to copy: ", err);
							});
						},
				}))
			})
		</script>
	}
}

templ Themes() {
	@layouts.DocsLayout(
		"Themes",
		"Customize the theme of the UI components.",
	) {
		<div
			x-data="themeCustomizer"
		>
			<div class="mb-16">
				<h1 class="text-3xl font-bold mb-2">Themes</h1>
				<p class="mb-4 text-muted-foreground">Customize the theme of the UI components.</p>
			</div>
			<div class="flex flex-col md:flex-row gap-8">
				<div class="w-full md:w-1/2">
					<div class="flex items-start justify-between mb-4">
						<div>
							<div class="font-semibold">Customize</div>
							<div class="text-xs text-muted-foreground">Pick a style and color for your components.</div>
						</div>
						@components.Button(components.ButtonProps{
							Size:    components.ButtonSizeIcon,
							Variant: components.ButtonVariantOutline,
							Attributes: templ.Attributes{
								"@click": "resetTheme",
							},
						}) {
							@icons.RotateCcw(icons.IconProps{Size: "14"})
						}
					</div>
					@ThemeCustomizer(ThemeCustomizerProps{
						CurrentTheme:  "orange",
						CurrentRadius: "0.5",
					})
				</div>
				<div class="w-full md:w-1/2">
					<div class="mb-4">
						<div class="font-semibold">Preview</div>
						<div class="text-xs text-muted-foreground">This is how your theme will look like.</div>
					</div>
					@ThemePreview()
				</div>
			</div>
		</div>
		@ThemesHandle()
	}
}

templ ThemePreview() {
	<div id="theme-preview" class="theme-preview p-6 border rounded-lg">
		@components.Card(components.CardProps{}) {
			@components.CardHeader(components.CardHeaderProps{}) {
				@components.CardTitle(components.CardTitleProps{}) {
					User Registration 
				}
				@components.CardDescription(components.CardDescriptionProps{}) {
					Please fill out the form below to create your account. 
				}
			}
			@components.CardContent(components.CardContentProps{}) {
				<form class="space-y-4">
					@components.FormItem(components.FormItemProps{}) {
						@components.FormLabel(components.FormLabelProps{
							For: "username",
						}) {
							Username
						}
						@components.Input(components.InputProps{
							ID:          "username",
							Name:        "username",
							Type:        components.InputTypeText,
							Placeholder: "Enter your username",
						})
					}
					@components.FormItem(components.FormItemProps{}) {
						@components.FormLabel(components.FormLabelProps{
							For: "email",
						}) {
							Email
						}
						@components.Input(components.InputProps{
							ID:          "email",
							Name:        "email",
							Type:        components.InputTypeEmail,
							Placeholder: "Enter your email",
						})
					}
					@components.FormItem(components.FormItemProps{}) {
						@components.FormLabel(components.FormLabelProps{
							For: "password",
						}) {
							Password
						}
						@components.Input(components.InputProps{
							ID:          "password",
							Name:        "password",
							Type:        components.InputTypePassword,
							Placeholder: "Enter your password",
						})
					}
					@components.FormItem(components.FormItemProps{}) {
						@components.FormLabel(components.FormLabelProps{
							For: "birthdate",
						}) {
							Birth Date
						}
						@components.DatePicker(components.DatePickerProps{
							ID:          "birthdate",
							Name:        "birthdate",
							Placeholder: "Select your birth date",
						})
					}
					@components.FormItem(components.FormItemProps{}) {
						@components.FormLabel(components.FormLabelProps{
							For: "contact-method",
						}) {
							Contact Method
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Radio(components.RadioProps{
								Value: "email",
								ID:    "contact-email",
								Name:  "contact-method",
							})
							@components.FormLabel(components.FormLabelProps{
								For: "contact-email",
							}) {
								Email
							}
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Radio(components.RadioProps{
								Value: "phone",
								ID:    "contact-phone",
								Name:  "contact-method",
							})
							@components.FormLabel(components.FormLabelProps{
								For: "contact-phone",
							}) {
								Phone
							}
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Radio(components.RadioProps{
								Value:      "mail",
								ID:         "contact-mail",
								Name:       "contact-method",
								Attributes: templ.Attributes{"disabled": "true"},
							})
							@components.FormLabel(components.FormLabelProps{
								For: "contact-mail",
							}) {
								Physical Mail
							}
						}
					}
					@components.FormItem(components.FormItemProps{}) {
						@components.FormLabel(components.FormLabelProps{}) {
							Preferences
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Toggle(components.ToggleProps{
								ID:   "marketing",
								Name: "marketing",
							})
							@components.FormLabel(components.FormLabelProps{
								For: "marketing",
							}) {
								Receive marketing emails
							}
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Toggle(components.ToggleProps{
								ID:         "notifications",
								Name:       "notifications",
								Attributes: templ.Attributes{"checked": "true"},
							})
							@components.FormLabel(components.FormLabelProps{
								For: "notifications",
							}) {
								Enable notifications
							}
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Toggle(components.ToggleProps{
								ID:         "beta",
								Name:       "beta",
								Attributes: templ.Attributes{"disabled": "true"},
							})
							@components.FormLabel(components.FormLabelProps{
								For: "beta",
							}) {
								Join beta program
							}
						}
					}
					@components.FormItem(components.FormItemProps{}) {
						@components.FormLabel(components.FormLabelProps{}) {
							Terms and Conditions
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Checkbox(components.CheckboxProps{
								ID:    "terms",
								Name:  "terms",
								Value: "accepted",
							})
							@components.FormLabel(components.FormLabelProps{
								For: "terms",
							}) {
								I accept the terms and conditions
							}
						}
						@components.FormItemFlex(components.FormItemProps{}) {
							@components.Checkbox(components.CheckboxProps{
								ID:    "newsletter",
								Name:  "newsletter",
								Value: "subscribed",
							})
							@components.FormLabel(components.FormLabelProps{
								For: "newsletter",
							}) {
								Subscribe to newsletter
							}
						}
					}
				</form>
			}
			@components.CardFooter(components.CardFooterProps{}) {
				<div class="flex justify-between w-full">
					@components.Button(components.ButtonProps{
						Variant: components.ButtonVariantSecondary,
					}) {
						Cancel
					}
					@components.Button(components.ButtonProps{}) {
						Register
					}
				</div>
			}
		}
	</div>
}

type ThemeCustomizerProps struct {
	CurrentTheme  string
	CurrentRadius string
}

templ ThemeCustomizer(props ThemeCustomizerProps) {
	<div
		class="theme-customizer w-full flex flex-col gap-2"
	>
		<div class="flex flex-1 flex-col space-y-4 md:space-y-6">
			@ThemeSelector()
			@RadiusSelector()
			@ModeSelector()
		</div>
		@components.ModalTrigger(components.ModalTriggerProps{
			ModalID: "css-modal",
		}) {
			@components.Button(components.ButtonProps{
				FullWidth: true,
				Attributes: templ.Attributes{
					"@click": "getGeneratedCSS",
				},
			}) {
				Generate and Copy CSS
			}
		}
		@components.Modal(components.ModalProps{ID: "css-modal", Class: "max-w-xl"}) {
			@components.ModalHeader(components.ModalHeaderProps{}) {
				Generated CSS Code
			}
			@components.ModalBody(components.ModalBodyProps{}) {
				<pre x-text="generatedCSS" class="text-primary p-4 rounded overflow-x-auto max-h-96"></pre>
			}
			@components.ModalFooter(components.ModalFooterProps{}) {
				<div class="flex gap-2">
					@components.Button(components.ButtonProps{
						Variant:    "primary",
						Attributes: templ.Attributes{"@click": "copyToClipboard"},
					}) {
						Copy to Clipboard
					}
					@components.ModalClose(components.ModalCloseProps{
						ModalID: "css-modal",
					}) {
						@components.Button(components.ButtonProps{
							Variant: "secondary",
						}) {
							Close
						}
					}
				</div>
			}
		}
	</div>
}

templ ThemeSelector() {
	<div class="space-y-1.5">
		<label class="text-xs font-medium">Theme</label>
		<div class="grid grid-cols-3 gap-2">
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(240 5.9% 10%);"
				data-theme="zinc"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="zinc"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Zinc
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(215.4 16.3% 46.9%);"
				data-theme="slate"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="slate"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Slate
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(25 5.3% 44.7%);"
				data-theme="stone"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="stone"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Stone
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(220 8.9% 46.1%);"
				data-theme="gray"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="gray"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Gray
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(0 0% 45.1%);"
				data-theme="neutral"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="neutral"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Neutral
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(0 72.2% 50.6%);"
				data-theme="red"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="red"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Red
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(346.8 77.2% 49.8%);"
				data-theme="rose"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="rose"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Rose
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(24.6 95% 53.1%);"
				data-theme="orange"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="orange"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Orange
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(142.1 76.2% 36.3%);"
				data-theme="green"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="green"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Green
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(221.2 83.2% 53.3%);"
				data-theme="blue"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="blue"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Blue
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(47.9 95.8% 53.1%);"
				data-theme="yellow"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="yellow"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Yellow
			</button>
			<button
				class="inline-flex items-center whitespace-nowrap font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-background shadow-xs hover:bg-accent hover:text-accent-foreground h-8 rounded-md px-3 text-xs justify-start border-2"
				style="--theme-primary: hsl(262.1 83.3% 57.8%);"
				data-theme="violet"
				x-bind:class="setBorderOnThemeButton"
				@click="setTheme"
			>
				<span class="mr-1 flex h-5 w-5 shrink-0 -translate-x-1 items-center justify-center rounded-full bg-(--theme-primary)">
					<span
						data-theme="violet"
						x-show="isTheme"
					>
						@icons.Check(icons.IconProps{Size: "12", Color: "white"})
					</span>
				</span>
				Violet
			</button>
		</div>
	</div>
}

templ RadiusSelector() {
	<div class="space-y-1.5">
		<label class="text-xs font-medium">Radius</label>
		<div class="grid grid-cols-5 gap-2">
			<button
				class="px-3 py-1 rounded border"
				data-radius="0"
				x-bind:class="setBorderOnRadiusButton"
				@click="setRadius"
			>
				0
			</button>
			<button
				class="px-3 py-1 rounded border"
				data-radius="0.3"
				x-bind:class="setBorderOnRadiusButton"
				@click="setRadius"
			>
				0.3
			</button>
			<button
				class="px-3 py-1 rounded border"
				data-radius="0.5"
				x-bind:class="setBorderOnRadiusButton"
				@click="setRadius"
			>
				0.5
			</button>
			<button
				class="px-3 py-1 rounded border"
				data-radius="0.75"
				x-bind:class="setBorderOnRadiusButton"
				@click="setRadius"
			>
				0.75
			</button>
			<button
				class="px-3 py-1 rounded border"
				data-radius="1.0"
				x-bind:class="setBorderOnRadiusButton"
				@click="setRadius"
			>
				1.0
			</button>
		</div>
	</div>
}

templ ModeSelector() {
	<div class="space-y-1.5">
		<label class="text-xs font-medium">Mode</label>
		@modules.ThemeSwitcher(modules.ThemeSwitcherProps{Class: "w-full border"})
	</div>
}
